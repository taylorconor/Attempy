{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintPML where

-- pretty-printer generated by the BNF converter

import AbsPML
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print STRING where
  prt _ (STRING i) = doc (showString ( i))


instance Print ID where
  prt _ (ID i) = doc (showString ( i))


instance Print NUMBER where
  prt _ (NUMBER i) = doc (showString ( i))



instance Print PROCESS where
  prt i e = case e of
   Process id prims -> prPrec i 0 (concatD [doc (showString "process") , prt 0 id , doc (showString "{") , prt 0 prims , doc (showString "}")])


instance Print PRIM where
  prt i e = case e of
   PrimBr optnm prims -> prPrec i 0 (concatD [doc (showString "branch") , prt 0 optnm , doc (showString "{") , prt 0 prims , doc (showString "}")])
   PrimSeln optnm prims -> prPrec i 0 (concatD [doc (showString "selection") , prt 0 optnm , doc (showString "{") , prt 0 prims , doc (showString "}")])
   PrimIter optnm prims -> prPrec i 0 (concatD [doc (showString "iteration") , prt 0 optnm , doc (showString "{") , prt 0 prims , doc (showString "}")])
   PrimSeq optnm prims -> prPrec i 0 (concatD [doc (showString "sequence") , prt 0 optnm , doc (showString "{") , prt 0 prims , doc (showString "}")])
   PrimTask optnm prims -> prPrec i 0 (concatD [doc (showString "task") , prt 0 optnm , doc (showString "{") , prt 0 prims , doc (showString "}")])
   PrimAct id optyp specs -> prPrec i 0 (concatD [doc (showString "action") , prt 0 id , prt 0 optyp , doc (showString "{") , prt 0 specs , doc (showString "}")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print OPTNM where
  prt i e = case e of
   OpNmNull  -> prPrec i 0 (concatD [])
   OpNmId id -> prPrec i 0 (concatD [prt 0 id])


instance Print OPTYP where
  prt i e = case e of
   OptNull  -> prPrec i 0 (concatD [])
   OptMan  -> prPrec i 0 (concatD [doc (showString "manual")])
   OptExec  -> prPrec i 0 (concatD [doc (showString "executable")])


instance Print SPEC where
  prt i e = case e of
   SpecProv expr -> prPrec i 0 (concatD [doc (showString "provides") , doc (showString "{") , prt 0 expr , doc (showString "}")])
   SpecReqs expr -> prPrec i 0 (concatD [doc (showString "requires") , doc (showString "{") , prt 0 expr , doc (showString "}")])
   SpecAgent expr -> prPrec i 0 (concatD [doc (showString "agent") , doc (showString "{") , prt 0 expr , doc (showString "}")])
   SpecScript string -> prPrec i 0 (concatD [doc (showString "script") , doc (showString "{") , prt 0 string , doc (showString "}")])
   SpecTool string -> prPrec i 0 (concatD [doc (showString "tool") , doc (showString "{") , prt 0 string , doc (showString "}")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print EXPR where
  prt i e = case e of
   DisjExpr expr0 expr -> prPrec i 2 (concatD [prt 2 expr0 , doc (showString "||") , prt 3 expr])
   ConjExpr expr0 expr -> prPrec i 3 (concatD [prt 3 expr0 , doc (showString "&&") , prt 4 expr])
   Str string -> prPrec i 4 (concatD [prt 0 string])
   RelEq valexpr0 valexpr -> prPrec i 4 (concatD [prt 0 valexpr0 , doc (showString "==") , prt 0 valexpr])
   RelNe valexpr0 valexpr -> prPrec i 4 (concatD [prt 0 valexpr0 , doc (showString "!=") , prt 0 valexpr])
   RelLt valexpr0 valexpr -> prPrec i 4 (concatD [prt 0 valexpr0 , doc (showString "<") , prt 0 valexpr])
   RelGt valexpr0 valexpr -> prPrec i 4 (concatD [prt 0 valexpr0 , doc (showString ">") , prt 0 valexpr])
   RelLe valexpr0 valexpr -> prPrec i 4 (concatD [prt 0 valexpr0 , doc (showString "<=") , prt 0 valexpr])
   RelGe valexpr0 valexpr -> prPrec i 4 (concatD [prt 0 valexpr0 , doc (showString ">=") , prt 0 valexpr])
   RelVeq varexpr0 varexpr -> prPrec i 4 (concatD [prt 0 varexpr0 , doc (showString "==") , prt 0 varexpr])
   RelVne varexpr0 varexpr -> prPrec i 4 (concatD [prt 0 varexpr0 , doc (showString "!=") , prt 0 varexpr])
   PrimVar varexpr -> prPrec i 5 (concatD [prt 0 varexpr])
   PrimAttr attrexpr -> prPrec i 5 (concatD [prt 0 attrexpr])
   PrimNot expr -> prPrec i 5 (concatD [doc (showString "!") , prt 5 expr])


instance Print VAREXPR where
  prt i e = case e of
   VarId id -> prPrec i 0 (concatD [prt 0 id])
   VarPar id -> prPrec i 0 (concatD [doc (showString "(") , prt 0 id , doc (showString ")")])
   VarMore id varexpr -> prPrec i 0 (concatD [doc (showString "(") , prt 0 id , doc (showString ")") , prt 0 varexpr])


instance Print ATTREXPR where
  prt i e = case e of
   Attr varexpr id -> prPrec i 0 (concatD [prt 0 varexpr , doc (showString ".") , prt 0 id])


instance Print VALEXPR where
  prt i e = case e of
   ValAttr attrexpr -> prPrec i 0 (concatD [prt 0 attrexpr])
   ValString string -> prPrec i 0 (concatD [prt 0 string])
   ValNum number -> prPrec i 0 (concatD [prt 0 number])



