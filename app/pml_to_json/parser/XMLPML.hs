module XMLPML where

-- pretty-printer generated by the BNF converter

import AbsPML
import Data.Char

-- the top-level printing method
printXML :: XPrint a => a -> String
printXML = render . prt 0

render = unlines

-- the printer class does the job
class XPrint a where
  prt :: Int -> a -> [String]
  prtList :: Int -> [a] -> [String]
  prtList i = concat . map (prt i)

instance XPrint a => XPrint [a] where
  prt = prtList

tag t = "<" ++ t ++ ">"
etag t = "<" ++ t ++ "/>"
elemTok i t x = [replicate (i+i) ' ' ++ tag (t ++ " value = " ++ show x ++ " /")]
elemTokS i t x = elemTok i t (show x)
elemFun i t x = [replicate (i+i) ' ' ++ tag x]
endtag f c = tag ("/" ++ f)


instance XPrint Integer where
  prt i x = elemTokS i "Integer" x

instance XPrint Double where
  prt i x = elemTokS i "Double" x

instance XPrint Char where
  prt i x = elemTokS i "Char" x

  prtList i xs = elemTok i "String" xs

instance XPrint STRING where
  prt i (STRING x) = elemTok i "STRING" x

instance XPrint ID where
  prt i (ID x) = elemTok i "ID" x

instance XPrint NUMBER where
  prt i (NUMBER x) = elemTok i "NUMBER" x


instance XPrint PROCESS where
  prt i e = case e of
   Process id prims -> concat $  elemFun i "PROCESS" "Process" : prt (i+1) id : prt (i+1) prims : [[replicate (i+i) ' ' ++ endtag "Process" "PROCESS"]]


instance XPrint PRIM where
  prt i e = case e of
   PrimBr optnm prims -> concat $  elemFun i "PRIM" "PrimBr" : prt (i+1) optnm : prt (i+1) prims : [[replicate (i+i) ' ' ++ endtag "PrimBr" "PRIM"]]
   PrimSeln optnm prims -> concat $  elemFun i "PRIM" "PrimSeln" : prt (i+1) optnm : prt (i+1) prims : [[replicate (i+i) ' ' ++ endtag "PrimSeln" "PRIM"]]
   PrimIter optnm prims -> concat $  elemFun i "PRIM" "PrimIter" : prt (i+1) optnm : prt (i+1) prims : [[replicate (i+i) ' ' ++ endtag "PrimIter" "PRIM"]]
   PrimSeq optnm prims -> concat $  elemFun i "PRIM" "PrimSeq" : prt (i+1) optnm : prt (i+1) prims : [[replicate (i+i) ' ' ++ endtag "PrimSeq" "PRIM"]]
   PrimTask optnm prims -> concat $  elemFun i "PRIM" "PrimTask" : prt (i+1) optnm : prt (i+1) prims : [[replicate (i+i) ' ' ++ endtag "PrimTask" "PRIM"]]
   PrimAct id optyp specs -> concat $  elemFun i "PRIM" "PrimAct" : prt (i+1) id : prt (i+1) optyp : prt (i+1) specs : [[replicate (i+i) ' ' ++ endtag "PrimAct" "PRIM"]]


instance XPrint OPTNM where
  prt i e = case e of
   OpNmNull  -> concat $  elemFun i "OPTNM" "OpNmNull"  : [[replicate (i+i) ' ' ++ endtag "OpNmNull" "OPTNM"]]
   OpNmId id -> concat $  elemFun i "OPTNM" "OpNmId" : prt (i+1) id : [[replicate (i+i) ' ' ++ endtag "OpNmId" "OPTNM"]]


instance XPrint OPTYP where
  prt i e = case e of
   OptNull  -> concat $  elemFun i "OPTYP" "OptNull"  : [[replicate (i+i) ' ' ++ endtag "OptNull" "OPTYP"]]
   OptMan  -> concat $  elemFun i "OPTYP" "OptMan"  : [[replicate (i+i) ' ' ++ endtag "OptMan" "OPTYP"]]
   OptExec  -> concat $  elemFun i "OPTYP" "OptExec"  : [[replicate (i+i) ' ' ++ endtag "OptExec" "OPTYP"]]


instance XPrint SPEC where
  prt i e = case e of
   SpecProv expr -> concat $  elemFun i "SPEC" "SpecProv" : prt (i+1) expr : [[replicate (i+i) ' ' ++ endtag "SpecProv" "SPEC"]]
   SpecReqs expr -> concat $  elemFun i "SPEC" "SpecReqs" : prt (i+1) expr : [[replicate (i+i) ' ' ++ endtag "SpecReqs" "SPEC"]]
   SpecAgent expr -> concat $  elemFun i "SPEC" "SpecAgent" : prt (i+1) expr : [[replicate (i+i) ' ' ++ endtag "SpecAgent" "SPEC"]]
   SpecScript string -> concat $  elemFun i "SPEC" "SpecScript" : prt (i+1) string : [[replicate (i+i) ' ' ++ endtag "SpecScript" "SPEC"]]
   SpecTool string -> concat $  elemFun i "SPEC" "SpecTool" : prt (i+1) string : [[replicate (i+i) ' ' ++ endtag "SpecTool" "SPEC"]]


instance XPrint EXPR where
  prt i e = case e of
   DisjExpr expr0 expr -> concat $  elemFun i "EXPR" "DisjExpr" : prt (i+1) expr0 : prt (i+1) expr : [[replicate (i+i) ' ' ++ endtag "DisjExpr" "EXPR"]]
   ConjExpr expr0 expr -> concat $  elemFun i "EXPR" "ConjExpr" : prt (i+1) expr0 : prt (i+1) expr : [[replicate (i+i) ' ' ++ endtag "ConjExpr" "EXPR"]]
   Str string -> concat $  elemFun i "EXPR" "Str" : prt (i+1) string : [[replicate (i+i) ' ' ++ endtag "Str" "EXPR"]]
   RelEq valexpr0 valexpr -> concat $  elemFun i "EXPR" "RelEq" : prt (i+1) valexpr0 : prt (i+1) valexpr : [[replicate (i+i) ' ' ++ endtag "RelEq" "EXPR"]]
   RelNe valexpr0 valexpr -> concat $  elemFun i "EXPR" "RelNe" : prt (i+1) valexpr0 : prt (i+1) valexpr : [[replicate (i+i) ' ' ++ endtag "RelNe" "EXPR"]]
   RelLt valexpr0 valexpr -> concat $  elemFun i "EXPR" "RelLt" : prt (i+1) valexpr0 : prt (i+1) valexpr : [[replicate (i+i) ' ' ++ endtag "RelLt" "EXPR"]]
   RelGt valexpr0 valexpr -> concat $  elemFun i "EXPR" "RelGt" : prt (i+1) valexpr0 : prt (i+1) valexpr : [[replicate (i+i) ' ' ++ endtag "RelGt" "EXPR"]]
   RelLe valexpr0 valexpr -> concat $  elemFun i "EXPR" "RelLe" : prt (i+1) valexpr0 : prt (i+1) valexpr : [[replicate (i+i) ' ' ++ endtag "RelLe" "EXPR"]]
   RelGe valexpr0 valexpr -> concat $  elemFun i "EXPR" "RelGe" : prt (i+1) valexpr0 : prt (i+1) valexpr : [[replicate (i+i) ' ' ++ endtag "RelGe" "EXPR"]]
   RelVeq varexpr0 varexpr -> concat $  elemFun i "EXPR" "RelVeq" : prt (i+1) varexpr0 : prt (i+1) varexpr : [[replicate (i+i) ' ' ++ endtag "RelVeq" "EXPR"]]
   RelVne varexpr0 varexpr -> concat $  elemFun i "EXPR" "RelVne" : prt (i+1) varexpr0 : prt (i+1) varexpr : [[replicate (i+i) ' ' ++ endtag "RelVne" "EXPR"]]
   PrimVar varexpr -> concat $  elemFun i "EXPR" "PrimVar" : prt (i+1) varexpr : [[replicate (i+i) ' ' ++ endtag "PrimVar" "EXPR"]]
   PrimAttr attrexpr -> concat $  elemFun i "EXPR" "PrimAttr" : prt (i+1) attrexpr : [[replicate (i+i) ' ' ++ endtag "PrimAttr" "EXPR"]]
   PrimNot expr -> concat $  elemFun i "EXPR" "PrimNot" : prt (i+1) expr : [[replicate (i+i) ' ' ++ endtag "PrimNot" "EXPR"]]


instance XPrint VAREXPR where
  prt i e = case e of
   VarId id -> concat $  elemFun i "VAREXPR" "VarId" : prt (i+1) id : [[replicate (i+i) ' ' ++ endtag "VarId" "VAREXPR"]]
   VarPar id -> concat $  elemFun i "VAREXPR" "VarPar" : prt (i+1) id : [[replicate (i+i) ' ' ++ endtag "VarPar" "VAREXPR"]]
   VarMore id varexpr -> concat $  elemFun i "VAREXPR" "VarMore" : prt (i+1) id : prt (i+1) varexpr : [[replicate (i+i) ' ' ++ endtag "VarMore" "VAREXPR"]]


instance XPrint ATTREXPR where
  prt i e = case e of
   Attr varexpr id -> concat $  elemFun i "ATTREXPR" "Attr" : prt (i+1) varexpr : prt (i+1) id : [[replicate (i+i) ' ' ++ endtag "Attr" "ATTREXPR"]]


instance XPrint VALEXPR where
  prt i e = case e of
   ValAttr attrexpr -> concat $  elemFun i "VALEXPR" "ValAttr" : prt (i+1) attrexpr : [[replicate (i+i) ' ' ++ endtag "ValAttr" "VALEXPR"]]
   ValString string -> concat $  elemFun i "VALEXPR" "ValString" : prt (i+1) string : [[replicate (i+i) ' ' ++ endtag "ValString" "VALEXPR"]]
   ValNum number -> concat $  elemFun i "VALEXPR" "ValNum" : prt (i+1) number : [[replicate (i+i) ' ' ++ endtag "ValNum" "VALEXPR"]]



