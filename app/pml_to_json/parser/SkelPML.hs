module SkelPML where

-- Haskell module generated by the BNF converter

import AbsPML
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transSTRING :: STRING -> Result
transSTRING x = case x of
  STRING str  -> failure x


transID :: ID -> Result
transID x = case x of
  ID str  -> failure x


transNUMBER :: NUMBER -> Result
transNUMBER x = case x of
  NUMBER str  -> failure x


transPROCESS :: PROCESS -> Result
transPROCESS x = case x of
  Process id prims  -> failure x


transPRIM :: PRIM -> Result
transPRIM x = case x of
  PrimBr optnm prims  -> failure x
  PrimSeln optnm prims  -> failure x
  PrimIter optnm prims  -> failure x
  PrimSeq optnm prims  -> failure x
  PrimTask optnm prims  -> failure x
  PrimAct id optyp specs  -> failure x


transOPTNM :: OPTNM -> Result
transOPTNM x = case x of
  OpNmNull  -> failure x
  OpNmId id  -> failure x


transOPTYP :: OPTYP -> Result
transOPTYP x = case x of
  OptNull  -> failure x
  OptMan  -> failure x
  OptExec  -> failure x


transSPEC :: SPEC -> Result
transSPEC x = case x of
  SpecProv expr  -> failure x
  SpecReqs expr  -> failure x
  SpecAgent expr  -> failure x
  SpecScript string  -> failure x
  SpecTool string  -> failure x


transEXPR :: EXPR -> Result
transEXPR x = case x of
  DisjExpr expr1 expr2  -> failure x
  ConjExpr expr1 expr2  -> failure x
  Str string  -> failure x
  RelEq valexpr1 valexpr2  -> failure x
  RelNe valexpr1 valexpr2  -> failure x
  RelLt valexpr1 valexpr2  -> failure x
  RelGt valexpr1 valexpr2  -> failure x
  RelLe valexpr1 valexpr2  -> failure x
  RelGe valexpr1 valexpr2  -> failure x
  RelVeq varexpr1 varexpr2  -> failure x
  RelVne varexpr1 varexpr2  -> failure x
  PrimVar varexpr  -> failure x
  PrimAttr attrexpr  -> failure x
  PrimNot expr  -> failure x


transVAREXPR :: VAREXPR -> Result
transVAREXPR x = case x of
  VarId id  -> failure x
  VarPar id  -> failure x
  VarMore id varexpr  -> failure x


transATTREXPR :: ATTREXPR -> Result
transATTREXPR x = case x of
  Attr varexpr id  -> failure x


transVALEXPR :: VALEXPR -> Result
transVALEXPR x = case x of
  ValAttr attrexpr  -> failure x
  ValString string  -> failure x
  ValNum number  -> failure x



