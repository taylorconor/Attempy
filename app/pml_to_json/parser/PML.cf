{- ======================================================================
   PML Grammar in LBNF format

   Andrew Butterfield, 2013
   
   Based on the files
       scanner.l
       parser.y 
   from the PML parser by John Noll.
====================================================================== -}

entrypoints PROCESS ;

{- ==== LEXICAL MATTERS ============================================== -}

{- scanner.l ------------------------------------------------------------
integer		[0-9]+
fraction	\.[0-9]+
exponent	[eE][+-]?[0-9]+
identifier	[a-zA-Z_][a-zA-Z0-9_]*
string		\"[^"]*\"

{string}			{intern ( ); return STRING;}
{integer}{fraction}?{exponent}?	{intern ( ); return NUMBER;}
{fraction}{exponent}?		{intern ( ); return NUMBER;}
{identifier}			{intern ( ); return ID;}

In LBNF there are similar: Integer, Double, Ident, String.
However LBNF Ident allows "'",
and LBNF Double does not allow "E" or "+" in exponents.
So, we roll our own....
---------------------------------------------------------------------- -}

token STRING  '"'  (char - ["\""])*  '"'  ;

token ID      (letter|'_')   (letter|digit|'_')*   ;

token NUMBER  ( ((digit+) ('.' (digit+))?) | ('.' (digit+)) ) 
              (('e' | 'E') ('+'|'-')? digit+)? 
              ;
       
{- scanner.l ------------------------------------------------------------
"action"			{return ACTION;}
"agent"				{return AGENT;}
"branch"			{return BRANCH;}
"executable"			{return EXECUTABLE;}
"iteration"			{return ITERATION;}
"manual"			{return MANUAL;}
"process"			{return PROCESS;}
"provides"			{return PROVIDES;}
"requires"			{return REQUIRES;}
"script"			{return SCRIPT;}
"selection"			{return SELECTION;}
"select"			{return SELECTION;} /* $jn: added for onr models. */
"sequence"			{return SEQUENCE;}
"task"				{return SEQUENCE;} /* $jn: added for onr models. */
"tool"				{return TOOL;}
We don't implement these in LBNF - create spurious Haskell data decls.
---------------------------------------------------------------------- -}

{- scanner.l ------------------------------------------------------------
"&&"				{return AND;}
"||"				{return OR;}
"<="				{return LE;}
">="				{return GE;}
"=="				{return EQ;}
"!="				{return NE;}
"<"				{return LT;}
">"				{return GT;}
"!"				{return NOT;}
"."				{return DOT;}
We don't implement these in LBNF - create spurious Haskell data decls.
---------------------------------------------------------------------- -}

{- scanner.l ------------------------------------------------------------
\n				{lineno ++;}
[ \t\r]+			{/* ignore */}
.				{return *yytext;}
These come out in the wash with LBNF defaults
---------------------------------------------------------------------- -}

{- scanner.l ------------------------------------------------------------
"/*"				{comment ( );}
/************************************************************************
 * Function:	comment							*
 *									*
 * Description:	Reads and discards input characters until the end of	*
 *		comment or end of file is seen.				*
 ************************************************************************/
static void comment ( ) 
{ int c;
    while ((c = input ( )) != EOF && c != 0)
	if (c == '\n')
	    lineno ++;
	else if (c == '*') { if ((c = input ( )) == '/') break;
	                     unput (c); } }
---------------------------------------------------------------------- -}
comment "/*" "*/" ;

{- ==== GRAMMATICAL MATTERS ========================================== -}

{- parser.y -------------------------------------------------------------
process
    : process_header '{' sequential_primitive_list '}'
	{
	    if ($3 != NULL)
		GraphInsert ($1, $3);
	    else
		NodeLink ($1 -> source, $1 -> sink);

	    program = $1;
	}
    ;
process_header
    : PROCESS ID
	{
	    Node source = NodeCreate ($2, PROCESS, lineno);
	    Node sink = NodeCreate ($2, PROCESS, lineno);
	    $$ = GraphCreate (source, sink);
	}
    ;
We merge the two.
---------------------------------------------------------------------- -}
Process. PROCESS ::= "process" ID "{" [PRIM] "}" ;

{- parser.y -------------------------------------------------------------
concurrent_primitive_list
    : concurrent_primitive_list primitive
	{
	    if ($2 != NULL)
		GraphInsert ($1, $2);
	}

    | /* empty */
	{
	    $$ = $<graph>-1;
	}
    ;

sequential_primitive_list
    : sequential_primitive_list primitive
	{
	    if ($1 == NULL)
		$$ = $2;
	    else if ($2 != NULL)
		GraphLink ($1, $2);
	}

    | /* empty */
	{
	    $$ = NULL;
	}
    ;
As we only generate abstract syntax at parsing stage
(and leave semantic analysis for a later phase),
we blur this distinction.
---------------------------------------------------------------------- -}
[].  [PRIM] ::= ;
(:). [PRIM] ::= PRIM [PRIM]  ;

{- parser.y -------------------------------------------------------------
primitive
    : branch_primitive
    | selection_primitive
    | iteration_primitive
    | sequence_primitive
    | action_primitive
    ;
We fuse with the variants below

branch_primitive
    : branch_header '{' concurrent_primitive_list '}'
	{
	    if ($3 == NULL)
		NodeLink ($1 -> source, $1 -> sink);
	}
    ;
branch_header
    : BRANCH optional_name
	{
	    Node source = NodeCreate ($2, BRANCH, lineno);
	    Node sink = NodeCreate ($2, RENDEZVOUS, lineno);
	    $$ = GraphCreate (source, sink);
	}
    ;
We fuse these.
---------------------------------------------------------------------- -}
PrimBr. PRIM ::= "branch" OPTNM "{" [PRIM] "}" ;

{- parser.y -------------------------------------------------------------
selection_primitive
    : selection_header '{' concurrent_primitive_list '}'
	{
	    if ($3 == NULL)
		NodeLink ($1 -> source, $1 -> sink);
	}
    ;
selection_header
    : SELECTION optional_name
	{
	    Node source = NodeCreate ($2, SELECTION, lineno);
	    Node sink = NodeCreate ($2, JOIN, lineno);
	    $$ = GraphCreate (source, sink);
	}
    ;
"select" is severely deprecated, so we drop it
---------------------------------------------------------------------- -}
{- PrimSel.  PRIM ::= "select" OPTNM "{" [PRIM] "}" ; -}
PrimSeln. PRIM ::= "selection" OPTNM "{" [PRIM] "}" ;

{- parser.y -------------------------------------------------------------
iteration_primitive
    : ITERATION optional_name '{' sequential_primitive_list '}'
	{
	    if ($4 != NULL)
		NodeLink ($4 -> sink, $4 -> source);

	    $$ = $4;
	}
    ;
---------------------------------------------------------------------- -}
PrimIter. PRIM ::= "iteration" OPTNM "{" [PRIM] "}" ;

{- parser.y -------------------------------------------------------------
sequence_primitive
    : SEQUENCE optional_name '{' sequential_primitive_list '}'
	{
	    $$ = $4;
	}
    ;
---------------------------------------------------------------------- -}
PrimSeq.  PRIM ::= "sequence" OPTNM "{" [PRIM] "}" ;
PrimTask. PRIM ::= "task" OPTNM "{" [PRIM] "}" ;

{- parser.y -------------------------------------------------------------
action_primitive
    : action_header '{' specification_list '}'
    ;
action_header
    : ACTION ID optional_type
	{
	    Node node = NodeCreate ($2, ACTION, lineno);
	    $$ = GraphCreate (node, node);
	    node -> action_type = $3;
	}
    ;
We fuse these.
---------------------------------------------------------------------- -}
PrimAct. PRIM ::= "action" ID OPTYP "{" [SPEC] "}" ;

{- parser.y -------------------------------------------------------------
optional_name
    : ID
    | /* empty */
	{
	    $$ = "(anonymous)";
	}
    ;
---------------------------------------------------------------------- -}
OpNmNull. OPTNM ::= ;
OpNmId.   OPTNM ::= ID ;

{- parser.y -------------------------------------------------------------
optional_type
    : MANUAL
	{
	    $$ = MANUAL;
	}

    | EXECUTABLE
	{
	    $$ = EXECUTABLE;
	}

    | /* empty */
	{
	    $$ = 0;
	}
    ;
---------------------------------------------------------------------- -}
OptNull. OPTYP ::= ;
OptMan.  OPTYP ::= "manual" ;
OptExec. OPTYP ::= "executable" ;

{- parser.y -------------------------------------------------------------
specification_list
    : specification_list specification
    | /* empty */
    ;
---------------------------------------------------------------------- -}
[]. [SPEC] ::= ;
(:). [SPEC] ::= SPEC [SPEC]  ;

{- parser.y -------------------------------------------------------------
specification
    : PROVIDES '{' expression '}'
	{
	    and_trees (&($<graph>-2 -> source -> provides), $3);
	}

    | REQUIRES '{' expression '}'
	{
	    and_trees (&($<graph>-2 -> source -> requires), $3);
	}

    | AGENT '{' expression '}'
	{
	    and_trees (&($<graph>-2 -> source -> agent), $3);
	}

    | SCRIPT '{' STRING '}'
	{
	    $<graph>-2 -> source -> script = $3;
	}

    | TOOL '{' STRING '}'
	{
	    $<graph>-2 -> source -> tool = $3;
	}
    ;
---------------------------------------------------------------------- -}
SpecProv.   SPEC ::= "provides" "{" EXPR "}" ;
SpecReqs.   SPEC ::= "requires" "{" EXPR "}" ;
SpecAgent.  SPEC ::= "agent" "{" EXPR "}" ;
SpecScript. SPEC ::= "script" "{" STRING "}" ;
SpecTool.   SPEC ::= "tool" "{" STRING "}" ;

{- parser.y -------------------------------------------------------------
expression
    : disjunction_expression
    ;
---------------------------------------------------------------------- -}
_. EXPR ::= EXPR2 ;

{- parser.y -------------------------------------------------------------
disjunction_expression
    : conjunction_expression
    | disjunction_expression OR conjunction_expression
	{
	    $$ = TreeCreate ($1, $3, "||", OR);
	}
    ;
---------------------------------------------------------------------- -}
_.        EXPR2 ::= EXPR3 ;
DisjExpr. EXPR2 ::= EXPR2 "||" EXPR3 ;

{- parser.y -------------------------------------------------------------
conjunction_expression
    : relation_expression
    | conjunction_expression AND relation_expression
	{
	    $$ = TreeCreate ($1, $3, "&&", AND);
	}
    ;
---------------------------------------------------------------------- -}
_.        EXPR3 ::= EXPR4 ;
ConjExpr. EXPR3 ::= EXPR3 "&&" EXPR4 ;

{- parser.y -------------------------------------------------------------
relation_expression
    : string_expression
    | primary_expression
    | value_expression EQ value_expression
	{
	    $$ = TreeCreate ($1, $3, "==", EQ);
	}

    | value_expression NE value_expression
	{
	    $$ = TreeCreate ($1, $3, "!=", NE);
	}

    | value_expression LT value_expression
	{
	    $$ = TreeCreate ($1, $3, "<", LT);
	}

    | value_expression GT value_expression
	{
	    $$ = TreeCreate ($1, $3, ">", GT);
	}

    | value_expression LE value_expression
	{
	    $$ = TreeCreate ($1, $3, "<=", LE);
	}

    | value_expression GE value_expression
	{
	    $$ = TreeCreate ($1, $3, ">=", GE);
	}

    | variable_expression EQ variable_expression
	{
	    $$ = TreeCreate ($1, $3, "==", EQ);
	}

    | variable_expression NE variable_expression
	{
	    $$ = TreeCreate ($1, $3, "!=", NE);
	}
    ;
---------------------------------------------------------------------- -}
Str.     EXPR4 ::= STRING ;
_.       EXPR4 ::= EXPR5 ;
RelEq.   EXPR4 ::= VALEXPR "==" VALEXPR ;
RelNe.   EXPR4 ::= VALEXPR "!=" VALEXPR ;
RelLt.   EXPR4 ::= VALEXPR "<" VALEXPR ;
RelGt.   EXPR4 ::= VALEXPR ">" VALEXPR ;
RelLe.   EXPR4 ::= VALEXPR "<=" VALEXPR ;
RelGe.   EXPR4 ::= VALEXPR ">=" VALEXPR ;
RelVeq.  EXPR4 ::= VAREXPR "==" VAREXPR ;
RelVne.  EXPR4 ::= VAREXPR "!=" VAREXPR ;

{- parser.y -------------------------------------------------------------
primary_expression
    : variable_expression
    | attribute_expression
    | NOT primary_expression
	{
	    $$ = TreeCreate (NULL, $2, "!", NOT);
	}

    | '(' expression ')'
	{
	    $$ = $2;
	}
    ;
---------------------------------------------------------------------- -}
PrimVar.  EXPR5 ::= VAREXPR ;
PrimAttr. EXPR5 ::= ATTREXPR ;
PrimNot.  EXPR5 ::= "!" EXPR5 ;
_.            EXPR5 ::= "(" EXPR ")" ; 

{- parser.y -------------------------------------------------------------
variable_expression
    : identifier
    | '(' identifier ')'
	{
	    $$ = $2;
	}

    | '(' identifier ')' variable_expression
	{
	    $$ = TreeCreate ($2, $4, "(qualifier)", QUALIFIER);
	}
    ;
---------------------------------------------------------------------- -}
VarId.   VAREXPR ::= ID ;
VarPar.  VAREXPR ::= "(" ID ")" ;
VarMore. VAREXPR ::= "(" ID ")" VAREXPR ;

{- parser.y -------------------------------------------------------------
attribute_expression
    : variable_expression DOT identifier
	{
	    $$ = TreeCreate ($1, $3, ".", DOT);
	}
    ;
---------------------------------------------------------------------- -}
Attr. ATTREXPR ::= VAREXPR "." ID ;

{- parser.y -------------------------------------------------------------
value_expression
    : attribute_expression
    | string_expression
    | NUMBER
	{
	    $$ = TreeCreate (NULL, NULL, $1, lineno);
	}
    ;
---------------------------------------------------------------------- -}
ValAttr.   VALEXPR ::= ATTREXPR ;
ValString. VALEXPR ::= STRING ;
ValNum.    VALEXPR ::= NUMBER ;

{- parser.y -------------------------------------------------------------
/* we don't need to implement the following */
string_expression
    : STRING
	{
	    $$ = TreeCreate (NULL, NULL, $1, lineno);
	}
    ;


identifier
    : ID
	{
	    $$ = TreeCreate (NULL, NULL, $1, lineno);
	}
    ;
---------------------------------------------------------------------- -}
{- parser.y -------------------------------------------------------------
---------------------------------------------------------------------- -}

